<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SendGridPlus</name>
    </assembly>
    <members>
        <member name="P:SendGrid.EventData.Category">
            <summary>
            Applies to all message types.
            </summary>
        </member>
        <member name="P:SendGrid.EventData.Event">
            <summary>
            Applies to all message types.
            </summary>
        </member>
        <member name="P:SendGrid.EventData.Email">
            <summary>
            Applies to all message types.
            </summary>
        </member>
        <member name="P:SendGrid.EventData.Response">
            <summary>
            Applies to Deferred and Delivered events.
            </summary>
        </member>
        <member name="P:SendGrid.EventData.Attempt">
            <summary>
            Applies to the Deferred event.
            </summary>
        </member>
        <member name="P:SendGrid.EventData.Reason">
            <summary>
            Applies to the Bounce and Drop events
            </summary>
        </member>
        <member name="P:SendGrid.EventData.Url">
            <summary>
            Applies to the Click event.
            </summary>
        </member>
        <member name="P:SendGrid.EventData.Status">
            <summary>
            3 digit status code. Applies to the Bounce event.
            </summary>
        </member>
        <member name="P:SendGrid.EventData.Type">
            <summary>
            Applies to the Bounce event.
            </summary>
        </member>
        <member name="P:SendGrid.EventData.TimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="T:SendGrid.Events">
            <summary>
            A helper class for interacting with the SendGrid Event API.
            </summary>
        </member>
        <member name="M:SendGrid.Events.GetEvent(System.IO.Stream)">
            <summary>
            Gets a single event from an Stream, such as an MVC Controller's Request.InputStream.
            </summary>
            <param name="inputStream">The Stream to pull the JSON from.</param>
            <returns></returns>
        </member>
        <member name="M:SendGrid.Events.GetEvent``1(System.IO.Stream)">
            <summary>
            Gets a single event from an Stream, such as an MVC Controller's Request.InputStream.
            </summary>
            <typeparam name="T">A type inheriting from EventData to use to deserialize the data. Useful when including custom Identifiers.</typeparam>
            <param name="inputStream">The Stream to pull the JSON from.</param>
            <returns></returns>
        </member>
        <member name="M:SendGrid.Events.GetEvent(System.String)">
            <summary>
            Gets a single Event from a JSON string.
            </summary>
            <param name="json">A string containing the JSON event data.</param>
            <returns></returns>
        </member>
        <member name="M:SendGrid.Events.GetEvent``1(System.String)">
            <summary>
            Gets a single Event from a JSON string.
            </summary>
            <typeparam name="T">A type inheriting from EventData to use to deserialize the data. Useful when including custom Identifiers.</typeparam>
            <param name="json">A string containing the JSON event data.</param>
            <returns></returns>
        </member>
        <member name="M:SendGrid.Events.GetEvents(System.IO.Stream)">
            <summary>
            Gets a list of Batched Events from an Stream, such as an MVC Controller's Request.InputStream.
            </summary>
            <param name="inputStream"></param>
            <returns></returns>
        </member>
        <member name="M:SendGrid.Events.GetEvents``1(System.IO.Stream)">
            <summary>
            Gets a list of Batched Events from an Stream, such as an MVC Controller's Request.InputStream.
            </summary>
            <typeparam name="T">A type inheriting from EventData to use to deserialize the data. Useful when including custom Identifiers.</typeparam>
            <param name="inputStream"></param>
            <returns></returns>
        </member>
        <member name="M:SendGrid.Events.GetEvents(System.String)">
            <summary>
            Gets a list of Batched Events from a JSON string.
            </summary>
            <param name="json">A string containing the JSON batched event data.</param>
            <returns></returns>
        </member>
        <member name="M:SendGrid.Events.GetEvents``1(System.String)">
            <summary>
            Gets a list of Batched Events from a JSON string.
            </summary>
            <typeparam name="T">A type inheriting from EventData to use to deserialize the data. Useful when including custom Identifiers.</typeparam>
            <param name="json">A string containing the JSON batched event data.</param>
            <returns></returns>
        </member>
        <member name="T:SendGrid.Header">
            <summary>
            Represents the additional functionality to add SendGrid specific mail headers
            </summary>
        </member>
        <member name="T:SendGrid.IHeader">
            <summary>
            Represents the additional functionality to add SendGrid specific mail headers
            </summary>
        </member>
        <member name="M:SendGrid.IHeader.AddSubVal(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This adds a substitution value to be used during the mail merge.  Substitutions
            will happen in order added, so calls to this should match calls to addTo in the mail message.
            </summary>
            <param name="tag">string to be replaced in the message</param>
            <param name="substitutions">substitutions to be made, one per recipient</param>
        </member>
        <member name="M:SendGrid.IHeader.AddTo(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This adds the "to" array to the X-SMTPAPI header so that multiple recipients
            may be addressed in a single email. (but they each get their own email, instead of a single email with multiple TO: addressees)
            </summary>
            <param name="addresses">List of email addresses</param>
        </member>
        <member name="M:SendGrid.IHeader.AddUniqueIdentifier(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This adds parameters and values that will be passed back through SendGrid's
            Event API if an event notification is triggered by this email.
            </summary>
            <param name="identifiers">parameter value pairs to be passed back on event notification</param>
        </member>
        <member name="M:SendGrid.IHeader.SetCategory(System.String)">
            <summary>
            This sets the category for this email.  Statistics are stored on a per category
            basis, so this can be useful for tracking on a per group basis.
            </summary>
            <param name="category">categories applied to the message</param>
        </member>
        <member name="M:SendGrid.IHeader.Enable(System.String)">
            <summary>
            Shortcut method for enabling a filter.
            </summary>
            <param name="filter">The name of the filter to enable</param>
        </member>
        <member name="M:SendGrid.IHeader.Disable(System.String)">
            <summary>
            Shortcut method for disabling a filter.
            </summary>
            <param name="filter">The name of the filter to disable</param>
        </member>
        <member name="M:SendGrid.IHeader.AddFilterSetting(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Allows you to specify a filter setting.  You can find a list of filters and settings here:
            http://docs.sendgrid.com/documentation/api/web-api/filtersettings/
            </summary>
            <param name="filter">The name of the filter to set</param>
            <param name="settings">The multipart name of the parameter being set</param>
            <param name="value">The value that the settings name will be assigning</param>
        </member>
        <member name="M:SendGrid.IHeader.AddHeader(System.Net.Mail.MailMessage)">
            <summary>
            Attaches the SendGrid headers to the MIME.
            </summary>
            <param name="mime">the MIME to which we are attaching</param>
        </member>
        <member name="M:SendGrid.IHeader.AsJson">
            <summary>
            Converts the filter settings into a JSON string.
            </summary>
            <returns>string representation of the SendGrid headers</returns>
        </member>
        <member name="P:SendGrid.IHeader.To">
            <summary>
            Gets the array of recipient addresses from the X-SMTPAPI header
            </summary>
        </member>
        <member name="M:SendGrid.Header.AddSubVal(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This adds a substitution value to be used during the mail merge.  Substitutions
            will happen in order added, so calls to this should match calls to addTo in the mail message.
            </summary>
            <param name="tag">string to be replaced in the message</param>
            <param name="substitutions">substitutions to be made, one per recipient</param>
        </member>
        <member name="M:SendGrid.Header.AddTo(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This adds the "to" array to the X-SMTPAPI header so that multiple recipients
            may be addressed in a single email. (but they each get their own email, instead of a single email with multiple TO: addressees)
            </summary>
            <param name="addresses">List of email addresses</param>
        </member>
        <member name="M:SendGrid.Header.AddUniqueIdentifier(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This adds parameters and values that will be passed back through SendGrid's
            Event API if an event notification is triggered by this email.
            </summary>
            <param name="identifiers">parameter value pairs to be passed back on event notification</param>
        </member>
        <member name="M:SendGrid.Header.SetCategory(System.String)">
            <summary>
            This sets the category for this email.  Statistics are stored on a per category
            basis, so this can be useful for tracking on a per group basis.
            </summary>
            <param name="category">categories applied to the message</param>
        </member>
        <member name="M:SendGrid.Header.Enable(System.String)">
            <summary>
            Shortcut method for enabling a filter.
            </summary>
            <param name="filter">The name of the filter to enable</param>
        </member>
        <member name="M:SendGrid.Header.Disable(System.String)">
            <summary>
            Shortcut method for disabling a filter.
            </summary>
            <param name="filter">The name of the filter to disable</param>
        </member>
        <member name="M:SendGrid.Header.AddFilterSetting(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Allows you to specify a filter setting.  You can find a list of filters and settings here:
            http://docs.sendgrid.com/documentation/api/web-api/filtersettings/
            </summary>
            <param name="filter">The name of the filter to set</param>
            <param name="settings">The multipart name of the parameter being set</param>
            <param name="value">The value that the settings name will be assigning</param>
        </member>
        <member name="M:SendGrid.Header.AddHeader(System.Net.Mail.MailMessage)">
            <summary>
            Attaches the SendGrid headers to the MIME.
            </summary>
            <param name="mime">the MIME to which we are attaching</param>
        </member>
        <member name="M:SendGrid.Header.AsJson">
            <summary>
            Converts the filter settings into a JSON string.
            </summary>
            <returns>string representation of the SendGrid headers</returns>
        </member>
        <member name="P:SendGrid.Header.To">
            <summary>
            Gets the array of recipient addresses from the X-SMTPAPI header
            </summary>
        </member>
        <member name="T:SendGrid.IMail">
            <summary>
            Represents the basic set of functions that will be called by the user
            includes basic message data manipulation and filter settings
            </summary>
        </member>
        <member name="M:SendGrid.IMail.CreateMimeMessage">
            <summary>
            Used by the Transport object to create a MIME for SMTP
            </summary>
            <returns>MIME to be sent</returns>
        </member>
        <member name="M:SendGrid.IMail.AddTo(System.String)">
            <summary>
            Add to the 'To' address.
            </summary>
            <param name="address">single string eg. 'you@company.com'</param>
        </member>
        <member name="M:SendGrid.IMail.AddTo(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add to the 'To' address.
            </summary>
            <param name="addresses">list of email addresses as strings</param>
        </member>
        <member name="M:SendGrid.IMail.AddTo(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Add to the 'To' address.
            </summary>
            <param name="addresssInfo"> the dictionary keys are the email addresses, which points to a dictionary of 
            key substitutionValues pairs mapping to other address codes, such as { foo@bar.com => { 'DisplayName' => 'Mr Foo' } } </param>
        </member>
        <member name="M:SendGrid.IMail.AddCc(System.String)">
            <summary>
            Add to the 'CC' address.
            </summary>
            <param name="address">a single email address eg "you@company.com"</param>
        </member>
        <member name="M:SendGrid.IMail.AddCc(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add to the 'CC' address.
            </summary>
            <param name="addresses">a list of email addresses as strings</param>
        </member>
        <member name="M:SendGrid.IMail.AddCc(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Add to the 'CC' address.
            </summary>
            <param name="addresssInfo">the dictionary keys are the email addresses, which points to a dictionary of 
            key substitutionValues pairs mapping to other address codes, such as { foo@bar.com => { 'DisplayName' => 'Mr Foo' } } </param>
        </member>
        <member name="M:SendGrid.IMail.AddBcc(System.String)">
            <summary>
            Add to the 'Bcc' address.
            </summary>
            <param name="address">a single email as the input eg "you@company.com"</param>
        </member>
        <member name="M:SendGrid.IMail.AddBcc(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add to the 'Bcc' address.
            </summary>
            <param name="addresses">a list of emails as an array of strings.</param>
        </member>
        <member name="M:SendGrid.IMail.AddBcc(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Add to the 'Bcc' address.
            </summary>
            <param name="addresssInfo">the dictionary keys are the email addresses, which points to a dictionary of 
            key substitutionValues pairs mapping to other address codes, such as { foo@bar.com => { 'DisplayName' => 'Mr Foo' } }</param>
        </member>
        <member name="M:SendGrid.IMail.AddSubVal(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Defines a mapping between a replacement string in the text of the message to a list of 
            substitution values to be used, one per each recipient, in the same order as the recipients were added. 
            </summary>
            <param name="replacementTag">the string in the email that you'll replace eg. '-name-'</param>
            <param name="substitutionValues">a list of values that will be substituted in for the replacementTag, one for each recipient</param>
        </member>
        <member name="M:SendGrid.IMail.AddUniqueIdentifiers(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This adds parameters and values that will be passed back through SendGrid's
            Event API if an event notification is triggered by this email.
            </summary>
            <param name="identifiers">parameter substitutionValues pairs to be passed back on event notification</param>
        </member>
        <member name="M:SendGrid.IMail.SetCategory(System.String)">
            <summary>
            This sets the category for this email.  Statistics are stored on a per category
            basis, so this can be useful for tracking on a per group basis.
            </summary>
            <param name="category">categories applied to the message</param>
        </member>
        <member name="M:SendGrid.IMail.AddAttachment(System.String)">
            <summary>
            Add an attachment to the message.
            </summary>
            <param name="filePath">a fully qualified file path as a string</param>
        </member>
        <member name="M:SendGrid.IMail.AddAttachment(System.IO.Stream,System.String)">
            <summary>
            Add a stream as an attachment to the message
            </summary>
            <param name="stream">Stream of file to be attached</param>
            <param name="name">Name of file to be attached</param>
        </member>
        <member name="M:SendGrid.IMail.GetRecipients">
            <summary>
            GetRecipients returns a list of all the recipients by retrieving the to, cc, and bcc lists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SendGrid.IMail.AddHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Add custom headers to the message
            </summary>
            <param name="headers">key substitutionValues pairs</param>
        </member>
        <member name="M:SendGrid.IMail.DisableGravatar">
            <summary>
            Disable the gravatar app
            </summary>
        </member>
        <member name="M:SendGrid.IMail.DisableOpenTracking">
            <summary>
            Disable the open tracking app
            </summary>
        </member>
        <member name="M:SendGrid.IMail.DisableClickTracking">
            <summary>
            Disable the click tracking app
            </summary>
        </member>
        <member name="M:SendGrid.IMail.DisableSpamCheck">
            <summary>
            Disable the spam check
            </summary>
        </member>
        <member name="M:SendGrid.IMail.DisableUnsubscribe">
            <summary>
            Disable the unsubscribe app
            </summary>
        </member>
        <member name="M:SendGrid.IMail.DisableFooter">
            <summary>
            Disable the footer app
            </summary>
        </member>
        <member name="M:SendGrid.IMail.DisableGoogleAnalytics">
            <summary>
            Disable the Google Analytics app
            </summary>
        </member>
        <member name="M:SendGrid.IMail.DisableTemplate">
            <summary>
            Disable the templates app
            </summary>
        </member>
        <member name="M:SendGrid.IMail.DisableBcc">
            <summary>
            Disable Bcc app
            </summary>
        </member>
        <member name="M:SendGrid.IMail.DisableBypassListManagement">
            <summary>
            Disable the Bypass List Management app
            </summary>
        </member>
        <member name="M:SendGrid.IMail.EnableGravatar">
            <summary>
            Inserts the gravatar image of the sender to the bottom of the message
            </summary>
        </member>
        <member name="M:SendGrid.IMail.EnableOpenTracking">
            <summary>
            Adds an invisible image to the end of the email which can track e-mail opens.
            </summary>
        </member>
        <member name="M:SendGrid.IMail.EnableClickTracking(System.Boolean)">
            <summary>
            Causes all links to be overwritten, shortened, and pointed to SendGrid's servers so clicks will be tracked.
            </summary>
            <param name="includePlainText">true if links found in plain text portions of the message are to be overwritten</param>
        </member>
        <member name="M:SendGrid.IMail.EnableSpamCheck(System.Int32,System.String)">
            <summary>
            Provides notification when emails are detected that exceed a predefined spam threshold.
            </summary>
            <param name="score">Emails with a SpamAssassin score over this substitutionValues will be considered spam and not be delivered.</param>
            <param name="url">SendGrid will send an HTTP POST request to this url when a message is detected as spam</param>
        </member>
        <member name="M:SendGrid.IMail.EnableUnsubscribe(System.String,System.String)">
            <summary>
            Allows SendGrid to manage unsubscribes and ensure these users don't get future emails from the sender
            </summary>
            <param name="text">string for the plain text email body showing what you want the message to look like.</param>
            <param name="html">string for the HTML email body showing what you want the message to look like.</param>
        </member>
        <member name="M:SendGrid.IMail.EnableUnsubscribe(System.String)">
            <summary>
            Allows SendGrid to manage unsubscribes and ensure these users don't get future emails from the sender
            </summary>
            <param name="replace">Tag in the message body to be replaced with the unsubscribe link and message</param>
        </member>
        <member name="M:SendGrid.IMail.EnableFooter(System.String,System.String)">
            <summary>
            Attaches a message at the footer of the email
            </summary>
            <param name="text">Message for the plain text body of the email</param>
            <param name="html">Message for the HTML body of the email</param>
        </member>
        <member name="M:SendGrid.IMail.EnableGoogleAnalytics(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Re-writes links to integrate with Google Analytics
            </summary>
            <param name="source">Name of the referrer source (e.g. Google, SomeDomain.com, NewsletterA)</param>
            <param name="medium">Name of the marketing medium (e.g. Email)</param>
            <param name="term">Identify paid keywords</param>
            <param name="content">Use to differentiate ads</param>
            <param name="campaign">Name of the campaign</param>
        </member>
        <member name="M:SendGrid.IMail.EnableTemplate(System.String)">
            <summary>
            Wraps an HTML template around your email content.
            </summary>
            <param name="html">HTML that your emails will be wrapped in, containing a body replacementTag.</param>
        </member>
        <member name="M:SendGrid.IMail.EnableBcc(System.String)">
            <summary>
            Automatically sends a blind carbon copy to an address for every e-mail sent, without 
            adding that address to the header.
            </summary>
            <param name="email">A single email recipient</param>
        </member>
        <member name="M:SendGrid.IMail.EnableBypassListManagement">
            <summary>
            Enabing this app will bypass the normal unsubscribe / bounce / spam report checks 
            and queue the e-mail for delivery.
            </summary>
        </member>
        <member name="P:SendGrid.IMail.Attachments">
            <summary>
            Gets the attachment collection used to store data attached to this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.IMail.Bcc">
            <summary>
            Gets the address collection that contains the blind carbon copy (BCC) recipients for this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.IMail.Cc">
            <summary>
            Gets the address collection that contains the carbon copy (CC) recipients for this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.IMail.From">
            <summary>
            Gets or sets the from address for this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.IMail.Header">
            <summary>
            Gets the IHeader that is used to build the Headers that are transmitted with this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.IMail.Headers">
            <summary>
            Gets the e-mail headers that are transmitted with this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.IMail.Html">
            <summary>
            The HTML Body for the message.
            </summary>
        </member>
        <member name="P:SendGrid.IMail.HtmlTransferEncoding">
            <summary>
            The Transfer encoding to send the HTML body for the message. Used only by SMTP api.
            </summary>
        </member>
        <member name="P:SendGrid.IMail.ReplyTo">
            <summary>
            Gets or sets the list of addresses to reply to for the mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.IMail.Subject">
            <summary>
            Gets or sets the subject line for this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.IMail.Text">
            <summary>
            The text body for the message.
            </summary>
        </member>
        <member name="P:SendGrid.IMail.TextTransferEncoding">
            <summary>
            The Transfer encoding to send the text body for the message. Used only by SMTP api.
            </summary>
        </member>
        <member name="P:SendGrid.IMail.To">
            <summary>
             Gets the address collection that contains the recipients of this e-mail message.  
            </summary>
        </member>
        <member name="T:SendGrid.Mail">
            <summary>
            
            </summary>
        </member>
        <member name="M:SendGrid.Mail.GetInstance">
            <summary>
            Creates an instance of SendGrid's custom message object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SendGrid.Mail.GetInstance(System.Net.Mail.MailAddress,System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.Net.Mail.MailAddress[],System.String,System.String,System.String)">
            <summary>
            Creates an instance of SendGrid's custom message object with mail parameters
            </summary>
            <param name="from">The email address of the sender</param>
            <param name="to">An array of the recipients</param>
            <param name="cc">Supported over SMTP, with future plans for support in the Web transport</param>
            <param name="bcc">Blind recipients</param>
            <param name="subject">The subject of the message</param>
            <param name="html">the html content for the message</param>
            <param name="text">the plain text part of the message</param>
            <param name="transport">Transport class to use for sending the message</param>
            <returns></returns>
        </member>
        <member name="M:SendGrid.Mail.AddTo(System.String)">
            <summary>
            Add to the 'To' address.
            </summary>
            <param name="address">single string eg. 'you@company.com'</param>
        </member>
        <member name="M:SendGrid.Mail.AddTo(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add to the 'To' address.
            </summary>
            <param name="addresses">list of email addresses as strings</param>
        </member>
        <member name="M:SendGrid.Mail.AddTo(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Add to the 'To' address.
            </summary>
            <param name="addresssInfo"> the dictionary keys are the email addresses, which points to a dictionary of 
            key substitutionValues pairs mapping to other address codes, such as { foo@bar.com => { 'DisplayName' => 'Mr Foo' } } </param>
        </member>
        <member name="M:SendGrid.Mail.AddCc(System.String)">
            <summary>
            Add to the 'CC' address.
            </summary>
            <param name="address">a single email address eg "you@company.com"</param>
        </member>
        <member name="M:SendGrid.Mail.AddCc(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add to the 'CC' address.
            </summary>
            <param name="addresses">a list of email addresses as strings</param>
        </member>
        <member name="M:SendGrid.Mail.AddCc(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Add to the 'CC' address.
            </summary>
            <param name="addresssInfo">the dictionary keys are the email addresses, which points to a dictionary of 
            key substitutionValues pairs mapping to other address codes, such as { foo@bar.com => { 'DisplayName' => 'Mr Foo' } } </param>
        </member>
        <member name="M:SendGrid.Mail.AddBcc(System.String)">
            <summary>
            Add to the 'Bcc' address.
            </summary>
            <param name="address">a single email as the input eg "you@company.com"</param>
        </member>
        <member name="M:SendGrid.Mail.AddBcc(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add to the 'Bcc' address.
            </summary>
            <param name="addresses">a list of emails as an array of strings.</param>
        </member>
        <member name="M:SendGrid.Mail.AddBcc(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Add to the 'Bcc' address.
            </summary>
            <param name="addresssInfo">the dictionary keys are the email addresses, which points to a dictionary of 
            key substitutionValues pairs mapping to other address codes, such as { foo@bar.com => { 'DisplayName' => 'Mr Foo' } }</param>
        </member>
        <member name="M:SendGrid.Mail.AddSubVal(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Defines a mapping between a replacement string in the text of the message to a list of 
            substitution values to be used, one per each recipient, in the same order as the recipients were added. 
            </summary>
            <param name="replacementTag">the string in the email that you'll replace eg. '-name-'</param>
            <param name="substitutionValues">a list of values that will be substituted in for the replacementTag, one for each recipient</param>
        </member>
        <member name="M:SendGrid.Mail.AddUniqueIdentifiers(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This adds parameters and values that will be passed back through SendGrid's
            Event API if an event notification is triggered by this email.
            </summary>
            <param name="identifiers">parameter substitutionValues pairs to be passed back on event notification</param>
        </member>
        <member name="M:SendGrid.Mail.SetCategory(System.String)">
            <summary>
            This sets the category for this email.  Statistics are stored on a per category
            basis, so this can be useful for tracking on a per group basis.
            </summary>
            <param name="category">categories applied to the message</param>
        </member>
        <member name="M:SendGrid.Mail.AddAttachment(System.IO.Stream,System.String)">
            <summary>
            Add a stream as an attachment to the message
            </summary>
            <param name="stream">Stream of file to be attached</param>
            <param name="name">Name of file to be attached</param>
        </member>
        <member name="M:SendGrid.Mail.AddAttachment(System.String)">
            <summary>
            Add an attachment to the message.
            </summary>
            <param name="filePath">a fully qualified file path as a string</param>
        </member>
        <member name="M:SendGrid.Mail.GetRecipients">
            <summary>
            GetRecipients returns a list of all the recipients by retrieving the to, cc, and bcc lists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SendGrid.Mail.AddHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Add custom headers to the message
            </summary>
            <param name="headers">key substitutionValues pairs</param>
        </member>
        <member name="M:SendGrid.Mail.DisableGravatar">
            <summary>
            Disable the gravatar app
            </summary>
        </member>
        <member name="M:SendGrid.Mail.DisableOpenTracking">
            <summary>
            Disable the open tracking app
            </summary>
        </member>
        <member name="M:SendGrid.Mail.DisableClickTracking">
            <summary>
            Disable the click tracking app
            </summary>
        </member>
        <member name="M:SendGrid.Mail.DisableSpamCheck">
            <summary>
            Disable the spam check
            </summary>
        </member>
        <member name="M:SendGrid.Mail.DisableUnsubscribe">
            <summary>
            Disable the unsubscribe app
            </summary>
        </member>
        <member name="M:SendGrid.Mail.DisableFooter">
            <summary>
            Disable the footer app
            </summary>
        </member>
        <member name="M:SendGrid.Mail.DisableGoogleAnalytics">
            <summary>
            Disable the Google Analytics app
            </summary>
        </member>
        <member name="M:SendGrid.Mail.DisableTemplate">
            <summary>
            Disable the templates app
            </summary>
        </member>
        <member name="M:SendGrid.Mail.DisableBcc">
            <summary>
            Disable Bcc app
            </summary>
        </member>
        <member name="M:SendGrid.Mail.DisableBypassListManagement">
            <summary>
            Disable the Bypass List Management app
            </summary>
        </member>
        <member name="M:SendGrid.Mail.EnableGravatar">
            <summary>
            Inserts the gravatar image of the sender to the bottom of the message
            </summary>
        </member>
        <member name="M:SendGrid.Mail.EnableOpenTracking">
            <summary>
            Adds an invisible image to the end of the email which can track e-mail opens.
            </summary>
        </member>
        <member name="M:SendGrid.Mail.EnableClickTracking(System.Boolean)">
            <summary>
            Causes all links to be overwritten, shortened, and pointed to SendGrid's servers so clicks will be tracked.
            </summary>
            <param name="includePlainText">true if links found in plain text portions of the message are to be overwritten</param>
        </member>
        <member name="M:SendGrid.Mail.EnableSpamCheck(System.Int32,System.String)">
            <summary>
            Provides notification when emails are detected that exceed a predefined spam threshold.
            </summary>
            <param name="score">Emails with a SpamAssassin score over this substitutionValues will be considered spam and not be delivered.</param>
            <param name="url">SendGrid will send an HTTP POST request to this url when a message is detected as spam</param>
        </member>
        <member name="M:SendGrid.Mail.EnableUnsubscribe(System.String,System.String)">
            <summary>
            Allows SendGrid to manage unsubscribes and ensure these users don't get future emails from the sender
            </summary>
            <param name="text">string for the plain text email body showing what you want the message to look like.</param>
            <param name="html">string for the HTML email body showing what you want the message to look like.</param>
        </member>
        <member name="M:SendGrid.Mail.EnableUnsubscribe(System.String)">
            <summary>
            Allows SendGrid to manage unsubscribes and ensure these users don't get future emails from the sender
            </summary>
            <param name="replace">Tag in the message body to be replaced with the unsubscribe link and message</param>
        </member>
        <member name="M:SendGrid.Mail.EnableFooter(System.String,System.String)">
            <summary>
            Attaches a message at the footer of the email
            </summary>
            <param name="text">Message for the plain text body of the email</param>
            <param name="html">Message for the HTML body of the email</param>
        </member>
        <member name="M:SendGrid.Mail.EnableGoogleAnalytics(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Re-writes links to integrate with Google Analytics
            </summary>
            <param name="source">Name of the referrer source (e.g. Google, SomeDomain.com, NewsletterA)</param>
            <param name="medium">Name of the marketing medium (e.g. Email)</param>
            <param name="term">Identify paid keywords</param>
            <param name="content">Use to differentiate ads</param>
            <param name="campaign">Name of the campaign</param>
        </member>
        <member name="M:SendGrid.Mail.EnableTemplate(System.String)">
            <summary>
            Wraps an HTML template around your email content.
            </summary>
            <param name="html">HTML that your emails will be wrapped in, containing a body replacementTag.</param>
        </member>
        <member name="M:SendGrid.Mail.EnableBcc(System.String)">
            <summary>
            Automatically sends a blind carbon copy to an address for every e-mail sent, without 
            adding that address to the header.
            </summary>
            <param name="email">A single email recipient</param>
        </member>
        <member name="M:SendGrid.Mail.EnableBypassListManagement">
            <summary>
            Enabing this app will bypass the normal unsubscribe / bounce / spam report checks 
            and queue the e-mail for delivery.
            </summary>
        </member>
        <member name="M:SendGrid.Mail.CreateMimeMessage">
            <summary>
            Used by the Transport object to create a MIME for SMTP
            </summary>
            <returns>MIME to be sent.</returns>
        </member>
        <member name="M:SendGrid.Mail.SaveMessage(System.String)">
            <summary>
            Helper function lets us look at the mime before it is sent
            </summary>
            <param name="directory">directory in which we store this mime message</param>
        </member>
        <member name="P:SendGrid.Mail.Attachments">
            <summary>
            Gets the attachment collection used to store data attached to this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.Mail.Bcc">
            <summary>
            Gets the address collection that contains the blind carbon copy (BCC) recipients for this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.Mail.Cc">
            <summary>
            Gets the address collection that contains the carbon copy (CC) recipients for this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.Mail.From">
            <summary>
            Gets or sets the from address for this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.Mail.Header">
            <summary>
            Gets the IHeader that is used to build the Headers that are transmitted with this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.Mail.Headers">
            <summary>
            Gets the e-mail headers that are transmitted with this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.Mail.Html">
            <summary>
            The HTML Body for the message.
            </summary>
        </member>
        <member name="P:SendGrid.Mail.HtmlTransferEncoding">
            <summary>
            The Transfer encoding to send the HTML body for the message. Used only by SMTP api.
            </summary>
        </member>
        <member name="P:SendGrid.Mail.ReplyTo">
            <summary>
            Gets or sets the list of addresses to reply to for the mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.Mail.StreamedAttachments">
            <summary>
            
            </summary>
        </member>
        <member name="P:SendGrid.Mail.Subject">
            <summary>
            Gets or sets the subject line for this e-mail message. 
            </summary>
        </member>
        <member name="P:SendGrid.Mail.Text">
            <summary>
            The text body for the message.
            </summary>
        </member>
        <member name="P:SendGrid.Mail.TextTransferEncoding">
            <summary>
            The Transfer encoding to send the text body for the message. Used only by SMTP api.
            </summary>
        </member>
        <member name="P:SendGrid.Mail.To">
            <summary>
             Gets the address collection that contains the recipients of this e-mail message.  
            </summary>
        </member>
        <member name="T:SendGrid.Transport.ITransport">
            <summary>
            Encapsulates the transport mechanism so that it can be used in a generic way, 
            regardless of the transport type
            </summary>
        </member>
        <member name="M:SendGrid.Transport.ITransport.Deliver(SendGrid.IMail)">
            <summary>
            Delivers a message using the protocol of the derived class
            </summary>
            <param name="message">the message to be delivered</param>
        </member>
        <member name="M:SendGrid.Transport.Web.GetInstance(System.Net.NetworkCredential,System.String)">
            <summary>
            Factory method for Web transport of sendgrid messages
            </summary>
            <param name="credentials">SendGrid credentials for sending mail messages</param>
            <param name="url">The uri of the Web endpoint</param>
            <returns>New instance of the transport mechanism</returns>
        </member>
        <member name="M:SendGrid.Transport.Web.#ctor(System.Net.NetworkCredential,System.String)">
            <summary>
            Creates a new Web interface for sending mail.  Preference is using the Factory method.
            </summary>
            <param name="credentials">SendGrid user parameters</param>
            <param name="url">The uri of the Web endpoint</param>
        </member>
        <member name="M:SendGrid.Transport.Web.Deliver(SendGrid.IMail)">
            <summary>
            Delivers a message over SendGrid's Web interface
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:SendGrid.Transport.SMTP">
            <summary>
            Transport class for delivering messages via SMTP
            </summary>
        </member>
        <member name="F:SendGrid.Transport.SMTP.SmtpServer">
            <summary>
            SendGrid's host name
            </summary>
        </member>
        <member name="F:SendGrid.Transport.SMTP.Port">
            <summary>
            Port for Simple Mail Transfer Protocol
            </summary>
        </member>
        <member name="F:SendGrid.Transport.SMTP.SslPort">
            <summary>
            Port for Secure SMTP
            </summary>
        </member>
        <member name="F:SendGrid.Transport.SMTP.TlsPort">
            <summary>
            Port for TLS (currently not supported)
            </summary>
        </member>
        <member name="F:SendGrid.Transport.SMTP._client">
            <summary>
            Client used to deliver SMTP message
            </summary>
        </member>
        <member name="M:SendGrid.Transport.SMTP.#ctor(SendGrid.Transport.SMTP.ISmtpClient,System.Net.NetworkCredential,System.String,System.Int32)">
            <summary>
            Transport created to deliver messages to SendGrid using SMTP
            </summary>
            <param name="client">SMTP client we are wrapping</param>
            <param name="credentials">Sendgrid user credentials</param>
            <param name="host">MTA recieving this message.  By default, sent through SendGrid.</param>
            <param name="port">SMTP port 25 is the default.  Port 465 can be used for Secure SMTP.</param>
        </member>
        <member name="M:SendGrid.Transport.SMTP.Deliver(SendGrid.IMail)">
            <summary>
            Deliver an email using SMTP protocol
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SendGrid.Transport.SMTP.GetInstance(System.Net.NetworkCredential,System.String,System.Int32)">
            <summary>
            Transport created to deliver messages to SendGrid using SMTP
            </summary>
            <param name="credentials">Sendgrid user credentials</param>
            <param name="host">MTA recieving this message.  By default, sent through SendGrid.</param>
            <param name="port">SMTP port 25 is the default.  Port 465 can be used for Secure SMTP.</param>
        </member>
        <member name="M:SendGrid.Transport.SMTP.GetInstance(SendGrid.Transport.SMTP.ISmtpClient,System.Net.NetworkCredential,System.String,System.Int32)">
            <summary>
            For Unit Testing Only!
            </summary>
            <param name="client"></param>
            <param name="credentials"></param>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:SendGrid.Transport.SMTP.ISmtpClient">
            <summary>
            Interface to allow testing
            </summary>
        </member>
        <member name="T:SendGrid.Transport.SMTP.SmtpWrapper">
            <summary>
            Implementation of SmtpClient wrapper, separated to allow dependency injection
            </summary>
        </member>
        <member name="M:SendGrid.Utils.Serialize``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SendGrid.Utils.SerializeDictionary(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
    </members>
</doc>
